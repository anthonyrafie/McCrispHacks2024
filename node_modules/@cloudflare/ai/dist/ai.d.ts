import { Tensor } from "./tensor";
import { SessionOptions } from "./session";
import { modelMappings } from "./catalog";
export type AiTask = {
    tensors: Array<Tensor<any>>;
    preProcessedInputs: any;
    postProcessedOutputs: any;
    schema: any;
    preProcessing: Function;
    generateTensors: Function;
    postProcessing: Function;
    postProcessingStream?: Function;
};
type AiOptions = {
    debug?: boolean;
    apiGateway?: Boolean;
    apiAccount?: string;
    apiToken?: string;
    sessionOptions?: SessionOptions;
};
type ModelMappings = typeof modelMappings;
type GetModelName<T> = {
    [K in keyof T]: T[K] extends {
        models: readonly (infer U)[];
    } ? U : never;
}[keyof T];
type ModelName = GetModelName<ModelMappings>;
type GetModelClass<M extends ModelName, T> = {
    [K in keyof T]: T[K] extends {
        models: readonly string[];
        class: infer C;
    } ? M extends T[K]["models"][number] ? C : never : never;
}[keyof T];
type ConstructorParametersForModel<M extends ModelName> = ConstructorParameters<GetModelClass<M, ModelMappings>>[0];
export declare class Ai {
    private binding;
    private options;
    private task;
    constructor(binding: any, options?: AiOptions);
    addModel(task: string, model: string, settings: any): void;
    run<M extends ModelName>(model: M, inputs: ConstructorParametersForModel<M>): Promise<any>;
}
export {};
//# sourceMappingURL=ai.d.ts.map