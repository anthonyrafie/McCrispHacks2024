import { Tensor, TensorType } from "../tensor";
const chunkArray = (arr, size) => arr.length > size ? [arr.slice(0, size), ...chunkArray(arr.slice(size), size)] : [arr];
export class AiTextEmbeddings {
    constructor(inputs, modelSettings) {
        this.schema = {
            input: {
                type: "object",
                properties: {
                    text: {
                        oneOf: [
                            { type: "string" },
                            {
                                type: "array",
                                items: {
                                    type: "string",
                                },
                                maxItems: 100,
                            },
                        ],
                    },
                },
                required: ["text"],
            },
            output: {
                type: "object",
                contentType: "application/json",
                properties: {
                    shape: {
                        type: "array",
                        items: {
                            type: "number",
                        },
                    },
                    data: {
                        type: "array",
                        items: {
                            type: "array",
                            items: {
                                type: "number",
                            },
                        },
                    },
                },
            },
        };
        this.inputs = inputs;
        this.modelSettings = modelSettings;
    }
    preProcessing() {
        this.preProcessedInputs = this.inputs;
    }
    generateTensors() {
        this.tensors = [
            new Tensor(TensorType.String, Array.isArray(this.preProcessedInputs.text) ? this.preProcessedInputs.text : [this.preProcessedInputs.text], {
                shape: [
                    Array.isArray(this.preProcessedInputs.text)
                        ? this.preProcessedInputs.text.length
                        : [this.preProcessedInputs.text].length,
                ],
                name: "input_text",
            }),
        ];
    }
    postProcessing(response) {
        if (this.modelSettings.postProcessingFunc) {
            this.postProcessedOutputs = this.modelSettings.postProcessingFunc(response);
        }
        else {
            this.postProcessedOutputs = {
                shape: response.embeddings.shape,
                data: response.embeddings.value,
            };
        }
    }
}
