"use strict";
exports["#/definitions/text-classification"] = validate10;
const schema11 = { "type": "object", "properties": { "text": { "type": "string" } }, "required": ["text"], "$id": "#/definitions/text-classification" };
function validate10(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.text === undefined) && (missing0 = "text")) {
            validate10.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.text !== undefined) {
                if (typeof data.text !== "string") {
                    validate10.errors = [{ instancePath: instancePath + "/text", schemaPath: "#/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
            }
        }
    }
    else {
        validate10.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate10.errors = vErrors; return errors === 0; }
exports["#/definitions/text-to-image"] = validate11;
const schema12 = { "type": "object", "properties": { "prompt": { "type": "string" }, "num_steps": { "type": "integer", "default": 20, "maximum": 20 } }, "required": ["prompt"], "$id": "#/definitions/text-to-image" };
function validate11(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.num_steps === undefined) {
            data.num_steps = 20;
        }
        let missing0;
        if ((data.prompt === undefined) && (missing0 = "prompt")) {
            validate11.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.prompt !== undefined) {
                const _errs1 = errors;
                if (typeof data.prompt !== "string") {
                    validate11.errors = [{ instancePath: instancePath + "/prompt", schemaPath: "#/properties/prompt/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid0 = _errs1 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                let data1 = data.num_steps;
                const _errs3 = errors;
                if (!((typeof data1 == "number") && (!(data1 % 1) && !isNaN(data1)))) {
                    validate11.errors = [{ instancePath: instancePath + "/num_steps", schemaPath: "#/properties/num_steps/type", keyword: "type", params: { type: "integer" }, message: "must be integer" }];
                    return false;
                }
                if (errors === _errs3) {
                    if (typeof data1 == "number") {
                        if (data1 > 20 || isNaN(data1)) {
                            validate11.errors = [{ instancePath: instancePath + "/num_steps", schemaPath: "#/properties/num_steps/maximum", keyword: "maximum", params: { comparison: "<=", limit: 20 }, message: "must be <= 20" }];
                            return false;
                        }
                    }
                }
                var valid0 = _errs3 === errors;
            }
        }
    }
    else {
        validate11.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate11.errors = vErrors; return errors === 0; }
exports["#/definitions/sentence-similarity"] = validate12;
const schema13 = { "type": "object", "properties": { "source": { "type": "string" }, "sentences": { "type": "array", "items": { "type": "string" } } }, "required": ["source", "sentences"], "$id": "#/definitions/sentence-similarity" };
function validate12(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if (((data.source === undefined) && (missing0 = "source")) || ((data.sentences === undefined) && (missing0 = "sentences"))) {
            validate12.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.source !== undefined) {
                const _errs1 = errors;
                if (typeof data.source !== "string") {
                    validate12.errors = [{ instancePath: instancePath + "/source", schemaPath: "#/properties/source/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid0 = _errs1 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                if (data.sentences !== undefined) {
                    let data1 = data.sentences;
                    const _errs3 = errors;
                    if (errors === _errs3) {
                        if (Array.isArray(data1)) {
                            var valid1 = true;
                            const len0 = data1.length;
                            for (let i0 = 0; i0 < len0; i0++) {
                                const _errs5 = errors;
                                if (typeof data1[i0] !== "string") {
                                    validate12.errors = [{ instancePath: instancePath + "/sentences/" + i0, schemaPath: "#/properties/sentences/items/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                                    return false;
                                }
                                var valid1 = _errs5 === errors;
                                if (!valid1) {
                                    break;
                                }
                            }
                        }
                        else {
                            validate12.errors = [{ instancePath: instancePath + "/sentences", schemaPath: "#/properties/sentences/type", keyword: "type", params: { type: "array" }, message: "must be array" }];
                            return false;
                        }
                    }
                    var valid0 = _errs3 === errors;
                }
                else {
                    var valid0 = true;
                }
            }
        }
    }
    else {
        validate12.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate12.errors = vErrors; return errors === 0; }
exports["#/definitions/text-embeddings"] = validate13;
const schema14 = { "type": "object", "properties": { "text": { "oneOf": [{ "type": "string" }, { "type": "array", "items": { "type": "string" }, "maxItems": 100 }] } }, "required": ["text"], "$id": "#/definitions/text-embeddings" };
function validate13(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        let missing0;
        if ((data.text === undefined) && (missing0 = "text")) {
            validate13.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.text !== undefined) {
                let data0 = data.text;
                const _errs2 = errors;
                let valid1 = false;
                let passing0 = null;
                const _errs3 = errors;
                if (typeof data0 !== "string") {
                    const err0 = { instancePath: instancePath + "/text", schemaPath: "#/properties/text/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err0];
                    }
                    else {
                        vErrors.push(err0);
                    }
                    errors++;
                }
                var _valid0 = _errs3 === errors;
                if (_valid0) {
                    valid1 = true;
                    passing0 = 0;
                }
                const _errs5 = errors;
                if (errors === _errs5) {
                    if (Array.isArray(data0)) {
                        if (data0.length > 100) {
                            const err1 = { instancePath: instancePath + "/text", schemaPath: "#/properties/text/oneOf/1/maxItems", keyword: "maxItems", params: { limit: 100 }, message: "must NOT have more than 100 items" };
                            if (vErrors === null) {
                                vErrors = [err1];
                            }
                            else {
                                vErrors.push(err1);
                            }
                            errors++;
                        }
                        else {
                            var valid2 = true;
                            const len0 = data0.length;
                            for (let i0 = 0; i0 < len0; i0++) {
                                const _errs7 = errors;
                                if (typeof data0[i0] !== "string") {
                                    const err2 = { instancePath: instancePath + "/text/" + i0, schemaPath: "#/properties/text/oneOf/1/items/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                    if (vErrors === null) {
                                        vErrors = [err2];
                                    }
                                    else {
                                        vErrors.push(err2);
                                    }
                                    errors++;
                                }
                                var valid2 = _errs7 === errors;
                                if (!valid2) {
                                    break;
                                }
                            }
                        }
                    }
                    else {
                        const err3 = { instancePath: instancePath + "/text", schemaPath: "#/properties/text/oneOf/1/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                        if (vErrors === null) {
                            vErrors = [err3];
                        }
                        else {
                            vErrors.push(err3);
                        }
                        errors++;
                    }
                }
                var _valid0 = _errs5 === errors;
                if (_valid0 && valid1) {
                    valid1 = false;
                    passing0 = [passing0, 1];
                }
                else {
                    if (_valid0) {
                        valid1 = true;
                        passing0 = 1;
                    }
                }
                if (!valid1) {
                    const err4 = { instancePath: instancePath + "/text", schemaPath: "#/properties/text/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
                    if (vErrors === null) {
                        vErrors = [err4];
                    }
                    else {
                        vErrors.push(err4);
                    }
                    errors++;
                    validate13.errors = vErrors;
                    return false;
                }
                else {
                    errors = _errs2;
                    if (vErrors !== null) {
                        if (_errs2) {
                            vErrors.length = _errs2;
                        }
                        else {
                            vErrors = null;
                        }
                    }
                }
            }
        }
    }
    else {
        validate13.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate13.errors = vErrors; return errors === 0; }
exports["#/definitions/speech-recognition"] = validate14;
const schema15 = { "oneOf": [{ "type": "string", "format": "binary" }, { "type": "object", "properties": { "audio": { "type": "array", "items": { "type": "number" } } } }], "$id": "#/definitions/speech-recognition" };
function validate14(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; const _errs0 = errors; let valid0 = false; let passing0 = null; const _errs1 = errors; if (errors === _errs1) {
    if (errors === _errs1) {
        if (!(typeof data === "string")) {
            const err0 = { instancePath, schemaPath: "#/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
    }
} var _valid0 = _errs1 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs3 = errors; if (errors === _errs3) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.audio !== undefined) {
            let data0 = data.audio;
            const _errs5 = errors;
            if (errors === _errs5) {
                if (Array.isArray(data0)) {
                    var valid2 = true;
                    const len0 = data0.length;
                    for (let i0 = 0; i0 < len0; i0++) {
                        const _errs7 = errors;
                        if (!(typeof data0[i0] == "number")) {
                            const err1 = { instancePath: instancePath + "/audio/" + i0, schemaPath: "#/oneOf/1/properties/audio/items/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                            if (vErrors === null) {
                                vErrors = [err1];
                            }
                            else {
                                vErrors.push(err1);
                            }
                            errors++;
                        }
                        var valid2 = _errs7 === errors;
                        if (!valid2) {
                            break;
                        }
                    }
                }
                else {
                    const err2 = { instancePath: instancePath + "/audio", schemaPath: "#/oneOf/1/properties/audio/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
            }
        }
    }
    else {
        const err3 = { instancePath, schemaPath: "#/oneOf/1/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err3];
        }
        else {
            vErrors.push(err3);
        }
        errors++;
    }
} var _valid0 = _errs3 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
} if (!valid0) {
    const err4 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err4];
    }
    else {
        vErrors.push(err4);
    }
    errors++;
    validate14.errors = vErrors;
    return false;
}
else {
    errors = _errs0;
    if (vErrors !== null) {
        if (_errs0) {
            vErrors.length = _errs0;
        }
        else {
            vErrors = null;
        }
    }
} validate14.errors = vErrors; return errors === 0; }
exports["#/definitions/image-classification"] = validate15;
const schema16 = { "oneOf": [{ "type": "string", "format": "binary" }, { "type": "object", "properties": { "image": { "type": "array", "items": { "type": "number" } } } }], "$id": "#/definitions/image-classification" };
function validate15(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; const _errs0 = errors; let valid0 = false; let passing0 = null; const _errs1 = errors; if (errors === _errs1) {
    if (errors === _errs1) {
        if (!(typeof data === "string")) {
            const err0 = { instancePath, schemaPath: "#/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
    }
} var _valid0 = _errs1 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs3 = errors; if (errors === _errs3) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.image !== undefined) {
            let data0 = data.image;
            const _errs5 = errors;
            if (errors === _errs5) {
                if (Array.isArray(data0)) {
                    var valid2 = true;
                    const len0 = data0.length;
                    for (let i0 = 0; i0 < len0; i0++) {
                        const _errs7 = errors;
                        if (!(typeof data0[i0] == "number")) {
                            const err1 = { instancePath: instancePath + "/image/" + i0, schemaPath: "#/oneOf/1/properties/image/items/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                            if (vErrors === null) {
                                vErrors = [err1];
                            }
                            else {
                                vErrors.push(err1);
                            }
                            errors++;
                        }
                        var valid2 = _errs7 === errors;
                        if (!valid2) {
                            break;
                        }
                    }
                }
                else {
                    const err2 = { instancePath: instancePath + "/image", schemaPath: "#/oneOf/1/properties/image/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
            }
        }
    }
    else {
        const err3 = { instancePath, schemaPath: "#/oneOf/1/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err3];
        }
        else {
            vErrors.push(err3);
        }
        errors++;
    }
} var _valid0 = _errs3 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
} if (!valid0) {
    const err4 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err4];
    }
    else {
        vErrors.push(err4);
    }
    errors++;
    validate15.errors = vErrors;
    return false;
}
else {
    errors = _errs0;
    if (vErrors !== null) {
        if (_errs0) {
            vErrors.length = _errs0;
        }
        else {
            vErrors = null;
        }
    }
} validate15.errors = vErrors; return errors === 0; }
exports["#/definitions/object-detection"] = validate16;
const schema17 = { "oneOf": [{ "type": "string", "format": "binary" }, { "type": "object", "properties": { "image": { "type": "array", "items": { "type": "number" } } } }], "$id": "#/definitions/object-detection" };
function validate16(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; const _errs0 = errors; let valid0 = false; let passing0 = null; const _errs1 = errors; if (errors === _errs1) {
    if (errors === _errs1) {
        if (!(typeof data === "string")) {
            const err0 = { instancePath, schemaPath: "#/oneOf/0/type", keyword: "type", params: { type: "string" }, message: "must be string" };
            if (vErrors === null) {
                vErrors = [err0];
            }
            else {
                vErrors.push(err0);
            }
            errors++;
        }
    }
} var _valid0 = _errs1 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs3 = errors; if (errors === _errs3) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.image !== undefined) {
            let data0 = data.image;
            const _errs5 = errors;
            if (errors === _errs5) {
                if (Array.isArray(data0)) {
                    var valid2 = true;
                    const len0 = data0.length;
                    for (let i0 = 0; i0 < len0; i0++) {
                        const _errs7 = errors;
                        if (!(typeof data0[i0] == "number")) {
                            const err1 = { instancePath: instancePath + "/image/" + i0, schemaPath: "#/oneOf/1/properties/image/items/type", keyword: "type", params: { type: "number" }, message: "must be number" };
                            if (vErrors === null) {
                                vErrors = [err1];
                            }
                            else {
                                vErrors.push(err1);
                            }
                            errors++;
                        }
                        var valid2 = _errs7 === errors;
                        if (!valid2) {
                            break;
                        }
                    }
                }
                else {
                    const err2 = { instancePath: instancePath + "/image", schemaPath: "#/oneOf/1/properties/image/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
            }
        }
    }
    else {
        const err3 = { instancePath, schemaPath: "#/oneOf/1/type", keyword: "type", params: { type: "object" }, message: "must be object" };
        if (vErrors === null) {
            vErrors = [err3];
        }
        else {
            vErrors.push(err3);
        }
        errors++;
    }
} var _valid0 = _errs3 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
} if (!valid0) {
    const err4 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err4];
    }
    else {
        vErrors.push(err4);
    }
    errors++;
    validate16.errors = vErrors;
    return false;
}
else {
    errors = _errs0;
    if (vErrors !== null) {
        if (_errs0) {
            vErrors.length = _errs0;
        }
        else {
            vErrors = null;
        }
    }
} validate16.errors = vErrors; return errors === 0; }
exports["#/definitions/text-generation"] = validate17;
const schema18 = { "type": "object", "oneOf": [{ "properties": { "prompt": { "type": "string", "maxLength": 4096 }, "raw": { "type": "boolean", "default": false }, "stream": { "type": "boolean", "default": false }, "max_tokens": { "type": "integer", "default": 256 } }, "required": ["prompt"] }, { "properties": { "messages": { "type": "array", "items": { "type": "object", "properties": { "role": { "type": "string" }, "content": { "type": "string", "maxLength": 4096 } }, "required": ["role", "content"] } }, "stream": { "type": "boolean", "default": false }, "max_tokens": { "type": "integer", "default": 256 } }, "required": ["messages"] }], "$id": "#/definitions/text-generation" };
const func2 = function ucs2length(str) { const len = str.length; let length = 0; let pos = 0; let value; while (pos < len) {
    length++;
    value = str.charCodeAt(pos++);
    if (value >= 0xd800 && value <= 0xdbff && pos < len) {
        value = str.charCodeAt(pos);
        if ((value & 0xfc00) === 0xdc00)
            pos++;
    }
} return length; };
function validate17(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (!(data && typeof data == "object" && !Array.isArray(data))) {
    validate17.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
    return false;
} const _errs1 = errors; let valid0 = false; let passing0 = null; const _errs2 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing0;
    if ((data.prompt === undefined) && (missing0 = "prompt")) {
        const err0 = { instancePath, schemaPath: "#/oneOf/0/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" };
        if (vErrors === null) {
            vErrors = [err0];
        }
        else {
            vErrors.push(err0);
        }
        errors++;
    }
    else {
        if (data.prompt !== undefined) {
            let data0 = data.prompt;
            const _errs3 = errors;
            if (errors === _errs3) {
                if (typeof data0 === "string") {
                    if (func2(data0) > 4096) {
                        const err1 = { instancePath: instancePath + "/prompt", schemaPath: "#/oneOf/0/properties/prompt/maxLength", keyword: "maxLength", params: { limit: 4096 }, message: "must NOT have more than 4096 characters" };
                        if (vErrors === null) {
                            vErrors = [err1];
                        }
                        else {
                            vErrors.push(err1);
                        }
                        errors++;
                    }
                }
                else {
                    const err2 = { instancePath: instancePath + "/prompt", schemaPath: "#/oneOf/0/properties/prompt/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                    if (vErrors === null) {
                        vErrors = [err2];
                    }
                    else {
                        vErrors.push(err2);
                    }
                    errors++;
                }
            }
            var valid1 = _errs3 === errors;
        }
        else {
            var valid1 = true;
        }
        if (valid1) {
            if (data.raw !== undefined) {
                const _errs5 = errors;
                if (typeof data.raw !== "boolean") {
                    const err3 = { instancePath: instancePath + "/raw", schemaPath: "#/oneOf/0/properties/raw/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                    if (vErrors === null) {
                        vErrors = [err3];
                    }
                    else {
                        vErrors.push(err3);
                    }
                    errors++;
                }
                var valid1 = _errs5 === errors;
            }
            else {
                var valid1 = true;
            }
            if (valid1) {
                if (data.stream !== undefined) {
                    const _errs7 = errors;
                    if (typeof data.stream !== "boolean") {
                        const err4 = { instancePath: instancePath + "/stream", schemaPath: "#/oneOf/0/properties/stream/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                        if (vErrors === null) {
                            vErrors = [err4];
                        }
                        else {
                            vErrors.push(err4);
                        }
                        errors++;
                    }
                    var valid1 = _errs7 === errors;
                }
                else {
                    var valid1 = true;
                }
                if (valid1) {
                    if (data.max_tokens !== undefined) {
                        let data3 = data.max_tokens;
                        const _errs9 = errors;
                        if (!((typeof data3 == "number") && (!(data3 % 1) && !isNaN(data3)))) {
                            const err5 = { instancePath: instancePath + "/max_tokens", schemaPath: "#/oneOf/0/properties/max_tokens/type", keyword: "type", params: { type: "integer" }, message: "must be integer" };
                            if (vErrors === null) {
                                vErrors = [err5];
                            }
                            else {
                                vErrors.push(err5);
                            }
                            errors++;
                        }
                        var valid1 = _errs9 === errors;
                    }
                    else {
                        var valid1 = true;
                    }
                }
            }
        }
    }
} var _valid0 = _errs2 === errors; if (_valid0) {
    valid0 = true;
    passing0 = 0;
} const _errs11 = errors; if (data && typeof data == "object" && !Array.isArray(data)) {
    let missing1;
    if ((data.messages === undefined) && (missing1 = "messages")) {
        const err6 = { instancePath, schemaPath: "#/oneOf/1/required", keyword: "required", params: { missingProperty: missing1 }, message: "must have required property '" + missing1 + "'" };
        if (vErrors === null) {
            vErrors = [err6];
        }
        else {
            vErrors.push(err6);
        }
        errors++;
    }
    else {
        if (data.messages !== undefined) {
            let data4 = data.messages;
            const _errs12 = errors;
            if (errors === _errs12) {
                if (Array.isArray(data4)) {
                    var valid3 = true;
                    const len0 = data4.length;
                    for (let i0 = 0; i0 < len0; i0++) {
                        let data5 = data4[i0];
                        const _errs14 = errors;
                        if (errors === _errs14) {
                            if (data5 && typeof data5 == "object" && !Array.isArray(data5)) {
                                let missing2;
                                if (((data5.role === undefined) && (missing2 = "role")) || ((data5.content === undefined) && (missing2 = "content"))) {
                                    const err7 = { instancePath: instancePath + "/messages/" + i0, schemaPath: "#/oneOf/1/properties/messages/items/required", keyword: "required", params: { missingProperty: missing2 }, message: "must have required property '" + missing2 + "'" };
                                    if (vErrors === null) {
                                        vErrors = [err7];
                                    }
                                    else {
                                        vErrors.push(err7);
                                    }
                                    errors++;
                                }
                                else {
                                    if (data5.role !== undefined) {
                                        const _errs16 = errors;
                                        if (typeof data5.role !== "string") {
                                            const err8 = { instancePath: instancePath + "/messages/" + i0 + "/role", schemaPath: "#/oneOf/1/properties/messages/items/properties/role/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                            if (vErrors === null) {
                                                vErrors = [err8];
                                            }
                                            else {
                                                vErrors.push(err8);
                                            }
                                            errors++;
                                        }
                                        var valid4 = _errs16 === errors;
                                    }
                                    else {
                                        var valid4 = true;
                                    }
                                    if (valid4) {
                                        if (data5.content !== undefined) {
                                            let data7 = data5.content;
                                            const _errs18 = errors;
                                            if (errors === _errs18) {
                                                if (typeof data7 === "string") {
                                                    if (func2(data7) > 4096) {
                                                        const err9 = { instancePath: instancePath + "/messages/" + i0 + "/content", schemaPath: "#/oneOf/1/properties/messages/items/properties/content/maxLength", keyword: "maxLength", params: { limit: 4096 }, message: "must NOT have more than 4096 characters" };
                                                        if (vErrors === null) {
                                                            vErrors = [err9];
                                                        }
                                                        else {
                                                            vErrors.push(err9);
                                                        }
                                                        errors++;
                                                    }
                                                }
                                                else {
                                                    const err10 = { instancePath: instancePath + "/messages/" + i0 + "/content", schemaPath: "#/oneOf/1/properties/messages/items/properties/content/type", keyword: "type", params: { type: "string" }, message: "must be string" };
                                                    if (vErrors === null) {
                                                        vErrors = [err10];
                                                    }
                                                    else {
                                                        vErrors.push(err10);
                                                    }
                                                    errors++;
                                                }
                                            }
                                            var valid4 = _errs18 === errors;
                                        }
                                        else {
                                            var valid4 = true;
                                        }
                                    }
                                }
                            }
                            else {
                                const err11 = { instancePath: instancePath + "/messages/" + i0, schemaPath: "#/oneOf/1/properties/messages/items/type", keyword: "type", params: { type: "object" }, message: "must be object" };
                                if (vErrors === null) {
                                    vErrors = [err11];
                                }
                                else {
                                    vErrors.push(err11);
                                }
                                errors++;
                            }
                        }
                        var valid3 = _errs14 === errors;
                        if (!valid3) {
                            break;
                        }
                    }
                }
                else {
                    const err12 = { instancePath: instancePath + "/messages", schemaPath: "#/oneOf/1/properties/messages/type", keyword: "type", params: { type: "array" }, message: "must be array" };
                    if (vErrors === null) {
                        vErrors = [err12];
                    }
                    else {
                        vErrors.push(err12);
                    }
                    errors++;
                }
            }
            var valid2 = _errs12 === errors;
        }
        else {
            var valid2 = true;
        }
        if (valid2) {
            if (data.stream !== undefined) {
                const _errs20 = errors;
                if (typeof data.stream !== "boolean") {
                    const err13 = { instancePath: instancePath + "/stream", schemaPath: "#/oneOf/1/properties/stream/type", keyword: "type", params: { type: "boolean" }, message: "must be boolean" };
                    if (vErrors === null) {
                        vErrors = [err13];
                    }
                    else {
                        vErrors.push(err13);
                    }
                    errors++;
                }
                var valid2 = _errs20 === errors;
            }
            else {
                var valid2 = true;
            }
            if (valid2) {
                if (data.max_tokens !== undefined) {
                    let data9 = data.max_tokens;
                    const _errs22 = errors;
                    if (!((typeof data9 == "number") && (!(data9 % 1) && !isNaN(data9)))) {
                        const err14 = { instancePath: instancePath + "/max_tokens", schemaPath: "#/oneOf/1/properties/max_tokens/type", keyword: "type", params: { type: "integer" }, message: "must be integer" };
                        if (vErrors === null) {
                            vErrors = [err14];
                        }
                        else {
                            vErrors.push(err14);
                        }
                        errors++;
                    }
                    var valid2 = _errs22 === errors;
                }
                else {
                    var valid2 = true;
                }
            }
        }
    }
} var _valid0 = _errs11 === errors; if (_valid0 && valid0) {
    valid0 = false;
    passing0 = [passing0, 1];
}
else {
    if (_valid0) {
        valid0 = true;
        passing0 = 1;
    }
} if (!valid0) {
    const err15 = { instancePath, schemaPath: "#/oneOf", keyword: "oneOf", params: { passingSchemas: passing0 }, message: "must match exactly one schema in oneOf" };
    if (vErrors === null) {
        vErrors = [err15];
    }
    else {
        vErrors.push(err15);
    }
    errors++;
    validate17.errors = vErrors;
    return false;
}
else {
    errors = _errs1;
    if (vErrors !== null) {
        if (_errs1) {
            vErrors.length = _errs1;
        }
        else {
            vErrors = null;
        }
    }
} validate17.errors = vErrors; return errors === 0; }
exports["#/definitions/translation"] = validate18;
const schema19 = { "type": "object", "properties": { "text": { "type": "string" }, "source_lang": { "type": "string", "default": "en" }, "target_lang": { "type": "string" } }, "required": ["text", "target_lang"], "$id": "#/definitions/translation" };
function validate18(data, { instancePath = "", parentData, parentDataProperty, rootData = data } = {}) { ; let vErrors = null; let errors = 0; if (errors === 0) {
    if (data && typeof data == "object" && !Array.isArray(data)) {
        if (data.source_lang === undefined) {
            data.source_lang = "en";
        }
        let missing0;
        if (((data.text === undefined) && (missing0 = "text")) || ((data.target_lang === undefined) && (missing0 = "target_lang"))) {
            validate18.errors = [{ instancePath, schemaPath: "#/required", keyword: "required", params: { missingProperty: missing0 }, message: "must have required property '" + missing0 + "'" }];
            return false;
        }
        else {
            if (data.text !== undefined) {
                const _errs1 = errors;
                if (typeof data.text !== "string") {
                    validate18.errors = [{ instancePath: instancePath + "/text", schemaPath: "#/properties/text/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid0 = _errs1 === errors;
            }
            else {
                var valid0 = true;
            }
            if (valid0) {
                const _errs3 = errors;
                if (typeof data.source_lang !== "string") {
                    validate18.errors = [{ instancePath: instancePath + "/source_lang", schemaPath: "#/properties/source_lang/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                    return false;
                }
                var valid0 = _errs3 === errors;
                if (valid0) {
                    if (data.target_lang !== undefined) {
                        const _errs5 = errors;
                        if (typeof data.target_lang !== "string") {
                            validate18.errors = [{ instancePath: instancePath + "/target_lang", schemaPath: "#/properties/target_lang/type", keyword: "type", params: { type: "string" }, message: "must be string" }];
                            return false;
                        }
                        var valid0 = _errs5 === errors;
                    }
                    else {
                        var valid0 = true;
                    }
                }
            }
        }
    }
    else {
        validate18.errors = [{ instancePath, schemaPath: "#/type", keyword: "type", params: { type: "object" }, message: "must be object" }];
        return false;
    }
} validate18.errors = vErrors; return errors === 0; }
