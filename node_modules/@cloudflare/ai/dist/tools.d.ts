import { TensorsObject } from "./tensor";
export declare const debugLog: (dd: Boolean, what: string, args: any) => void;
export declare const validateInput: (schemaId: string, inputs: any) => void;
export declare const parseInputs: (inputs: any) => any[];
export declare const tensorByName: (result: any) => TensorsObject;
export declare const getModelSettings: (model: string, key?: string) => any;
export interface EventSourceParser {
    feed(chunk: string): void;
    reset(): void;
}
export interface ParsedEvent {
    type: "event";
    event?: string;
    id?: string;
    data: string;
}
export interface ReconnectInterval {
    type: "reconnect-interval";
    value: number;
}
export type ParseEvent = ParsedEvent | ReconnectInterval;
export type EventSourceParseCallback = (event: ParseEvent) => void;
export declare class EventSourceParserStream extends TransformStream<string, ParsedEvent> {
    constructor();
}
export declare function createParser(onParse: EventSourceParseCallback): EventSourceParser;
export declare class ResultStream extends TransformStream {
    constructor();
}
export declare const getEventStream: (body: ReadableStream) => {
    readable: ReadableStream<any>;
    reader: ReadableStreamDefaultReader<any>;
    writer: WritableStreamDefaultWriter<any>;
    write: (data: string) => Promise<void>;
};
export declare const readStream: (body: ReadableStream, debug: boolean, ctx: any, tensorData: boolean, postProcessing: Function | false) => ReadableStream<any>;
//# sourceMappingURL=tools.d.ts.map